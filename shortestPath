#Class to represent a graph 
class Graph: 
    
    # A utility function to find the vertex with minimum dist value, from the set of vertices still in queue 
    def minDistance(self,dist,queue): 
        # Initialize min value and min_index as -1 
        minimum = float("Inf") 
        min_index = -1
          
        # from the dist array,pick one which has min value and is till in queue 
        for i in range(len(dist)): 
            if dist[i] < minimum and i in queue: 
                minimum = dist[i] 
                min_index = i 
        return min_index 
  
  
    # Function to print shortest path from source to j using parent array 
    def printPath(self, parent, j, path): 
          
        #Base Case : If j is source 
        if parent[j] == -1 :  
            path.append(j)
            return
        self.printPath(parent , parent[j], path) 
        path.append(j)
          

  
    '''Function that implements Dijkstra's single source shortest path 
    algorithm for a graph represented using adjacency matrix 
    representation'''
    def dijkstra(self, graph, src, end): 
        path = []
        row = len(graph) 
        col = len(graph[0]) 
  
        # The output array. dist[i] will hold the shortest distance from src to i
        #Initialize all distances as INFINITE  
        dist = [float("Inf")] * row 
  
        # Parent array to store shortest path tree 
        parent = [-1] * row 
  
        # Distance of source vertex from itself is always 0 
        dist[src] = 0
      
        # Add all vertices in queue 
        queue = [] 
        for i in range(row): 
            queue.append(i) 
              
        #Find shortest path for all vertices 
        while queue: 
  
            # Pick the minimum dist vertex from the set of vertices still in queue 
            u = self.minDistance(dist,queue)  
  
            # remove min element      
            queue.remove(u) 
  
            # Update dist value and parent index of the adjacent vertices of the picked vertex. Consider only those vertices which are still in queue 
            for i in range(col): 
                '''Update dist[i] only if it is in queue, there is 
                an edge from u to i, and total weight of path from 
                src to i through u is smaller than current value of 
                dist[i]'''
                if graph[u][i] and i in queue: 
                    if dist[u] + graph[u][i] < dist[i]: 
                        dist[i] = dist[u] + graph[u][i] 
                        parent[i] = u 
  
  
        # print the constructed distance array
        self.printPath(parent, end, path)
        
        return path
  

def convertArray(nodes):  #converst the dictionary into an adjacent array to easily use
    
    graph = []
        
    
    for i in range(len(nodes)):
        connections = nodes[i][0]
        weights = nodes[i][1]
        
        convertArrayGraph = []
        
        for j in range(len(nodes)):
            if not j in connections:
                convertArrayGraph.append(0);
            else:
                convertArrayGraph.append(weights[connections.index(j)])
               
        graph.append(convertArrayGraph)
        
    return graph

"""
inputs -
graph - dictionary housing the node connections and weights
shortPath - an array of the shortest path for emergency cars
roundAbouts - an array of the nodes that are roundabouts
curveRoads - a double array that contains the edges that trucks should not travel on.
emergency - boolean variable to note if car is emergency vehicle
bigCar - boolean variable to note if car is big
"""
def weighting(graph, shortPath, roundAbouts, curveRoads, bigCar, emergency):
    
    #marks each road last traveled on as more congested
    for a in range(len(shortPath) - 1): 
        nodeInt = shortPath[a]
        nodeFinal = shortPath[a+1]
        
        
        if emergency == False and bigCar == False:
            connections = graph[nodeInt][0]
            weightIndex = connections.index(nodeFinal)
            graph[nodeInt][1][weightIndex] *= 2
                
            connections = graph[nodeFinal][0]
            weightIndex = connections.index(nodeInt)
            graph[nodeFinal][1][weightIndex] *= 2
            
        if bigCar == True:
            for a in roundAbouts:
                for b in graph[a][0]:
                    connections = graph[a][0]
                    weightIndex = connections.index(b)
                    graph[a][1][weightIndex] = 999
        
                    connections = graph[b][0]
                    weightIndex = connections.index(a)
                    graph[b][1][weightIndex] = 999
        
        
    return graph
        
    
g = Graph() 


graph1 = {0 : [[1],[.1]], 1 : [[0,6,2],[.1,.1,.1]], 2 : [[1,7,3],[.1,.1,.1]], 3 : [[2,8,4],[.1,.1,.1]], 4 : [[3,9,5],[.1,.1,.1]], 5 : [[4,14],[.1,.1]], 6 : [[1,7,10],[.1,.1,.1]], 7 : [[2,8,11,6],[.1,.1,.1,.1]], 8 : [[3,9,12,7],[.1,.1,.1,.1]], 9 : [[4,8,13],[.1,.1,.1]], 10 : [[6,11,18],[.1,.1,.1]], 11 : [[7,12,17,10],[.1,.1,.1,.1]], 12 : [[8,13,16,11],[.1,.1,.1,.1]], 13 : [[9,12,15],[.1,.1,.1]], 14 : [[5,15,26],[.1,.1,.1]], 15 : [[4,14,16,25],[.1,.1,.1,.1]], 16 : [[12,15,21,17],[.1,.1,.1,.1]], 17 : [[11,16,20,18],[.1,.1,.1,.1]], 18 : [[10,17,19],[.1,.1,.1]], 19 : [[18,20],[.1,.1]], 20 : [[17,19,23],[.1,.1,.1]], 21 : [[16,23,25],[1,1,1]], 22 : [[23,27],[.1,.3]], 23 : [[20,21,24,22],[.1,1,.1,.1]], 24 : [[23,25,28],[.1,.2,.1]], 25 : [[21,26,29,24],[1,.1,1,.2]], 26 : [[14,25,31],[.1,.1,.1]], 27 : [[22,28,34],[.3,.1,.1]], 28 : [[24,29,33,27],[.1,1,.1,.1]], 29 : [[25,28,30],[1,1,1]], 30 : [[29,31,32],[1,.1,.1]], 31 : [[26,30],[.1,.1]], 32 : [[30,33],[.1,.2]], 33 : [[28,32,34],[.1,.2,.1]], 34 : [[27,33,35],[.1,.1,.1]], 35 : [[34],[.1]]}

newGraph = convertArray(graph1)
Print the solution 
shortPath = g.dijkstra(newGraph,0,35)
print(shortPath)


y = Graph()
graph2 = weighting(graph1, shortPath, [24], [], True, True)
newGraph2 = convertArray(graph2)
# Print the solution 
shortPath = y.dijkstra(newGraph2,0,35)
print(shortPath)
